<?php

/**
 * Test class for Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic.
 * Generated by PHPUnit on 2011-12-13 at 12:21:05.
 *
 */
class Dfp_Datafeed_File_Format_Csv_Dialect_DynamicTest extends PHPUnit_Framework_TestCase
{

    public function test__construct()
    {
        $params = array(
                    'delimiter'=>'d',
                    'quote'=>'q',
                    'escape'=>'e',
                    'hasHeader'=>false
        );

        $c = new Zend_Config($params);

        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic($params);
        $this->assertEquals('d', $sut->getDelimiter());
        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic($c);
        $this->assertEquals('d', $sut->getDelimiter());

        try {
            $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic('string');
        } catch (Dfp_Datafeed_File_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                return;
            }
        }

        $this->fail('Exception not thrown');

    }

    public function testSetConfig()
    {
        $params = array(
            'delimiter'=>'d',
            'quote'=>'q',
            'escape'=>'e',
            'hasHeader'=>false
        );

        $c = new Zend_Config($params);
        $sut = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', array('setOptions'));
        $sut->expects($this->once())->method('setOptions')->with($this->equalTo($params));
        $sut->setConfig($c);
    }

    public function testSetOptions()
    {
        $params = array(
            'delimiter'=>'d',
            'quote'=>'q',
            'escape'=>'e',
            'hasHeader'=>false
        );

        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();
        $sut->setOptions($params);
        $this->assertEquals('d', $sut->getDelimiter());
        $this->assertEquals('e', $sut->getEscape());
        $this->assertEquals('q', $sut->getQuote());
        $this->assertFalse($sut->hasHeader());
    }

    public function testSetDelimiter()
    {
        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $sut->setDelimiter('d'));
        $this->assertEquals('d', $sut->getDelimiter());
    }

    public function testSetQuote()
    {
        $dynamic = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();

        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $dynamic->setQuote('Test'));
        $this->assertEquals('Test', $dynamic->getQuote());
    }

    public function testSetEscape()
    {
        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $sut->setEscape('esc'));
        $this->assertEquals('esc', $sut->getEscape());
    }

    public function testSetHasHeader()
    {
        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $sut->setHasHeader(false));
        $this->assertEquals(false, $sut->hasHeader());
    }

    public function testSetLineReturn()
    {
        $sut = new Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $sut->setLineReturn('OTHER'));
        $this->assertEquals('OTHER', $sut->getLineReturn());
    }
}
