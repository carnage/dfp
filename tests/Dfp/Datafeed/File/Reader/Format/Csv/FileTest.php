<?php

include_once 'vfsStream/vfsStream.php';

/**
 * Test class for Dfp_Datafeed_File_Reader_Format_Csv_File.
 * Generated by PHPUnit on 2011-12-14 at 15:46:54.
 *
 */
class Dfp_Datafeed_File_Reader_Format_Csv_FileTest extends PHPUnit_Framework_TestCase
{

    public function testGetDialect()
    {
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        $this->assertNull($sut->getDialect());
    }

    public function testSetDialect()
    {
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');

        $sut->setDialect($mockDialect);
        $this->assertSame($mockDialect, $sut->getDialect());
    }

    /**
     * @todo Implement testGetRecord().
     */
    public function testGetRecord()
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), "'testing','testing','testing'");

        $passed = $passed2 = false;
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        try {
            $sut->getRecord();
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'The file is not open') {
                $passed = True;
            }
        }

        $sut->open(vfsStream::url('base/test.csv'));

        try {
            $sut->getRecord();
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'The dialect is invalid') {
                $passed2 = True;
            }
        }

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $mockDialect->expects($this->once())->method('getQuote')->will($this->returnValue('\''));
        $mockDialect->expects($this->once())->method('getDelimiter')->will($this->returnValue(','));
        $mockDialect->expects($this->once())->method('getEscape')->will($this->returnValue('\\'));

        $sut->setDialect($mockDialect);

        $this->assertSame(array('testing','testing','testing'), $sut->getRecord());
        $this->assertTrue($passed);
        $this->assertTrue($passed2);
    }

    /**
     * @todo Implement testGetRaw().
     */
    public function testGetRaw()
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), "testData");

        $passed = false;
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        try {
            $sut->getRaw();
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'The file is not open') {
                $passed = True;
            }
        }

        $sut->open(vfsStream::url('base/test.csv'));

        $this->assertSame('testData', $sut->getRaw());
        $this->assertTrue($passed);
    }

    /**
     * @todo Implement testOpen().
     */
    public function testOpen()
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), "testData");

        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();

        $sut->open(vfsStream::url('base/test.csv'));

        $this->assertTrue($sut->isOpen());
        
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        try {
            $sut->open('invalid.csv');
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'Unable to open feed') {
                return;
            }
        }
        
        $this->fail('Exception not thrown');
    }

    public function testIsOpen()
    {
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        $this->assertFalse($sut->isOpen());
    }

    /**
     * @todo Implement testDetectHeader().
     * @dataProvider detectHeaderProvider
     */
    public function testDetectHeader($data,$result)
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), $data);

        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        $sut->open(vfsStream::url('base/test.csv'));

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $mockDialect->expects($this->any())->method('getQuote')->will($this->returnValue('"'));
        $mockDialect->expects($this->any())->method('getDelimiter')->will($this->returnValue(','));
        $mockDialect->expects($this->any())->method('getEscape')->will($this->returnValue('\\'));
        $sut->setDialect($mockDialect);


        $this->assertSame($result, $sut->detectHeader());
    }

    public function detectHeaderProvider()
    {

        $header = '"ID","Name","Price"' . "\n";
        $data = '1,"test",3.50' . "\n";
        $data .= '2,"test 123",3.50' . "\n";
        $data .= '3,"test product",3.50' . "\n";
        $data .= '4,"test something",3.50' . "\n";
        $data .= '5,"test something else",3.50' . "\n";
        $data .= '6,"test failed",3.50' . "\n";
        $data .= '7,"testing",3.50' . "\n";
        $data .= '8,"tested",3.50' . "\n";
        $data .= '9,"test again",3.50' . "\n";
        $data .= '10,"test passed",3.50' . "\n";

        return array(
            array(
                $header.$data,
                array('ID','Name','Price')
            ),
            array(
                $data,
                array('0','1','2')
            ),
        );
    }

    /**
     * @todo Implement testDetectDialect().
     * @dataProvider detectDialectProvider
     */
    public function testDetectDialect($filecontents, $result)
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), $filecontents);

        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();
        $sut->open(vfsStream::url('base/test.csv'));

        $this->assertEquals($sut->detectDialect(), $result);

    }

    public function detectDialectProvider()
    {
        return array(
            array(
                '"testing","testing","testing","testing"',
                array('quote'=>'"','delimiter'=>',')
            ),
            array(
                '"testing",1234',
                array('quote'=>'"','delimiter'=>',')
            ),
            array(
                '1234,"testing"',
                array('quote'=>'"','delimiter'=>',')
            ),
            array(
                '"testing"',
                array('quote'=>'"','delimiter'=>'')
            ),
            array(
                "'testing';'testing';'testing';'testing'",
                array('quote'=>'\'','delimiter'=>';')
            ),
            array(
                "1234,123,123,234\n1234,123,123,234\n",
                array('quote'=>'"','delimiter'=>',')
            )
        );
    }

    /**
     * @todo Implement testGenerateHeader().
     */
    public function testGenerateHeader()
    {
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), "'testing','testing','testing'");

        $sut = new Dfp_Datafeed_File_Reader_Format_Csv_File();

        $sut->open(vfsStream::url('base/test.csv'));

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $mockDialect->expects($this->once())->method('getQuote')->will($this->returnValue('\''));
        $mockDialect->expects($this->once())->method('getDelimiter')->will($this->returnValue(','));
        $mockDialect->expects($this->once())->method('getEscape')->will($this->returnValue('\\'));

        $sut->setDialect($mockDialect);

        $this->assertSame(array('0','1','2'), $sut->generateHeader());

    }
}