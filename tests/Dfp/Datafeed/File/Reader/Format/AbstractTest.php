<?php
/**
 * Test class for Dfp_Datafeed_File_Reader_Format_Abstract.
 * Generated by PHPUnit on 2011-12-14 at 16:31:56.
 *
 */
class Dfp_Datafeed_File_Reader_Format_AbstractTest extends PHPUnit_Framework_TestCase
{

    /**
     * @todo Implement testGetLocation().
     */
    public function testGetLocation()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $this->assertEquals(null, $sut->getLocation());
    }

    /**
     * @todo Implement testSetLocation().
     */
    public function testSetLocation()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->setLocation('test.csv');
        $this->assertEquals('test.csv', $sut->getLocation());
    }

    /**
     * @todo Implement testSetConfig().
     */
    public function testSetConfig()
    {
        $config = new Zend_Config(array('location'=>'test.csv'));
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->setConfig($config);
        $this->assertEquals('test.csv', $sut->getLocation());
    }

    /**
     * @todo Implement testSetOptions().
     */
    public function testSetOptions()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->setOptions(array('location'=>'test.csv'));
        $this->assertEquals('test.csv', $sut->getLocation());

        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $passed = false;
        try {
            $sut->setOptions(array('location'=>array('test')));
        } catch (Dfp_Datafeed_File_Exception $e) {
            if ($e->getMessage() == 'Invalid location specified') {
                $passed = True;
            }
        }

        $this->assertTrue($passed);

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Dialect_Interface');

        $sut = $this->getMockForAbstractClass(
        	'Dfp_Datafeed_File_Reader_Format_Abstract',
            array(),
        	'',
            TRUE,
            TRUE,
            TRUE,
            array('setDialect')
        );
        $sut->expects($this->once())->method('setDialect')->with($this->equalTo($mockDialect));
        $sut->setOptions(array('dialect'=>$mockDialect));

        $sut = $this->getMockForAbstractClass(
        	'Dfp_Datafeed_File_Reader_Format_Abstract',
            array(),
        	'',
            TRUE,
            TRUE,
            TRUE,
            array('setDialectString')
        );
        $sut->expects($this->once())->method('setDialectString')->with($this->equalTo('csv'));
        $sut->setOptions(array('dialect'=>'csv'));

        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        try {
            $sut->setOptions(array('dialect'=>array('test')));
        } catch (Dfp_Datafeed_File_Exception $e) {
            if ($e->getMessage() == 'Invalid dialect specified') {
                return;
            }
        }

        $this->fail('Exception not thrown');
    }


    /**
     * @todo Implement testCurrent().
     */
    public function testCurrent()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $this->assertNull($sut->current());
    }

    /**
     * @todo Implement testKey().
     */
    public function testKey()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $this->assertEquals(0, $sut->key());
    }

    /**
     * @todo Implement testNext().
     */
    public function testNext()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->expects($this->once())->method('_loadNextRecord');
        $sut->next();
    }

    /**
     * @todo Implement testRewind().
     */
    public function testRewind()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->expects($this->once())->method('_resetFeed');
        $sut->next();
        $sut->rewind();
    }

    /**
     * @todo Implement testValid().
     */
    public function testValid()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $this->assertFalse($sut->valid());
    }

    /**
     * @todo Implement testAddError().
     */
    public function testAddError()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->addError('123');
        $this->assertTrue($sut->hasErrors());
        $this->assertEquals(array('123'), $sut->getErrors());
    }

    /**
     * @todo Implement testAddErrors().
     */
    public function testAddErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->addErrors(array('123','456'));

        $this->assertTrue($sut->hasErrors());
        $this->assertEquals(array('123','456'), $sut->getErrors());
    }

    /**
     * @todo Implement testGetErrors().
     */
    public function testGetErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');

        $this->assertEmpty($sut->getErrors());
    }

    /**
     * @todo Implement testHasErrors().
     */
    public function testHasErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');

        $this->assertFalse($sut->hasErrors());
    }

    /**
     * @todo Implement testSetErrors().
     */
    public function testSetErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_File_Reader_Format_Abstract');
        $sut->addErrors(array('123','456'));

        $sut->setErrors(array('789'));

        $this->assertEquals(array('789'), $sut->getErrors());
    }
}
