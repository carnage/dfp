<?php

/**
 * Test class for Dfp_Datafeed_File_Writer_Format_Csv.
 * Generated by PHPUnit on 2011-12-13 at 12:08:13.
 *
 */
class Dfp_Datafeed_File_Writer_Format_CsvTest extends PHPUnit_Framework_TestCase
{
    /**
     * @todo Implement testGetDialect().
     */
    public function testGetDialect()
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv();

        $passed = false;
        try {
            $sut->getDialect();
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'Invalid Dialect') {
                $passed = true;
            }
        }
        
        $this->assertTrue($passed);
        
        $sut->setDialectString('tabs');
        $dialect = $sut->getDialect();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Tabs', $dialect);

        $this->assertEquals("\t", $dialect->getDelimiter());
    }

    /**
     * @todo Implement testSetDialect().
     */
    public function testSetDialect()
    {
        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv();
        $sut->setDialect($mockDialect);
        $this->assertSame($mockDialect, $sut->getDialect());
    }

    public function testGetFile()
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv();
        $this->assertInstanceOf('Dfp_Datafeed_File_Writer_Format_Csv_File', $sut->getFile());
    }

    public function testSetFile()
    {
        $mockFile = $this->getMock('Dfp_Datafeed_File_Writer_Format_Csv_File');
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv();
        $sut->setFile($mockFile);
        $this->assertSame($mockFile, $sut->getFile());
    }
    
    
    /**
     * @dataProvider writeRecordProvider
     * @param unknown_type $data
     * @param unknown_type $expected
     * @param unknown_type $calls
     */
    public function testWriteRecord($hasHeader,$data,$expected)
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv();
        $sut->setLocation('test.csv');
        
        $mockFile = $this->getMock('Dfp_Datafeed_File_Writer_Format_Csv_File', array('writeRecord', 'open'));
        $mockFile->expects($this->once())->method('open')->with($this->equalTo('test.csv'));
        foreach ($expected AS $index => $value) { 
            $mockFile->expects($this->at($index+1))->method('writeRecord')->with($this->equalTo($value));
        }
        $sut->setFile($mockFile);
        
        $dialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic');
        $dialect->expects($this->any())->method('hasHeader')->will($this->returnValue($hasHeader));
        $sut->setDialect($dialect);        
        
        $sut->writeRecord($data);
    }
    
    public function writeRecordProvider()
    {
        return array(
            array(
                null,
                array('test','123','testtesttest'),
                array(array('test','123','testtesttest')),
            ),
            array(
                null,
                array('col1'=>'test','col2'=>'123','col3'=>'testtesttest'),
                array(array('col1','col2','col3'), array('test','123','testtesttest')),
            ),            
            array(
                true,
                array('col1'=>'test','col2'=>'123','col3'=>'testtesttest'),
                array(array('col1','col2','col3'), array('test','123','testtesttest')),
            ),            
            array(
                false,
                array('col1'=>'test','col2'=>'123','col3'=>'testtesttest'),
                array(array('test','123','testtesttest')),
            ),           
            
        );
    }
}
