<?php

include_once 'vfsStream/vfsStream.php';

/**
 * Test class for Dfp_Datafeed_File_Writer_Format_Csv_File.
 * Generated by PHPUnit on 2011-12-14 at 15:46:54.
 *
 */
class Dfp_Datafeed_File_Writer_Format_Csv_FileTest extends PHPUnit_Framework_TestCase
{

    public function testGetDialect()
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv_File();
        $this->assertNull($sut->getDialect());
    }

    public function testSetDialect()
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv_File();
        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');

        $sut->setDialect($mockDialect);
        $this->assertSame($mockDialect, $sut->getDialect());
    }

    /**
     * @todo Implement testOpen().
     */
    public function testOpen()
    {
        $dir = vfsStream::setup('base');

        $sut = new Dfp_Datafeed_File_Writer_Format_Csv_File();

        $sut->open(vfsStream::url('base/test.csv'));

        $this->assertTrue($sut->isOpen());

        $this->assertTrue(vfsStreamWrapper::getRoot()->hasChild('test.csv'));

        vfsStreamWrapper::getRoot()->chmod(0400);

        try {
            $sut->open(vfsStream::url('base/testnowrite.csv'));
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'Unable to open feed') {
                return;
            }
        }

        $this->fail('Exception not thrown');

    }

    public function testIsOpen()
    {
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv_File();
        $this->assertFalse($sut->isOpen());
    }


    /**
     * @dataProvider writeRecordProvider
     * @param unknown_type $record
     * @param unknown_type $expected
     * @param unknown_type $escape
     */
    public function testWriteRecord($record, $expected, $escape, $lr)
    {
        $dir = vfsStream::setup('base');
        $sut = new Dfp_Datafeed_File_Writer_Format_Csv_File();

        $passed = $passed2 = false;
        try {
            $sut->writeRecord(array('test','testing','2.35','"test"'));
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'The file is not open') {
                $passed = True;
            }
        }

        $sut->open(vfsStream::url('base/test.csv'));

        try {
            $sut->writeRecord(array('test','testing','2.35','"test"'));
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'The dialect is invalid') {
                $passed2 = True;
            }
        }

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $mockDialect->expects($this->any())->method('getQuote')->will($this->returnValue('"'));
        $mockDialect->expects($this->any())->method('getDelimiter')->will($this->returnValue(','));
        $mockDialect->expects($this->any())->method('getEscape')->will($this->returnValue($escape));
        $mockDialect->expects($this->any())->method('getLineReturn')->will($this->returnValue($lr));

        $sut->setDialect($mockDialect);


        $sut->writeRecord($record);

        $this->assertEquals($expected, file_get_contents(vfsStream::url('base/test.csv')));
        //echo "\n\n";var_dump(getcwd());
    }

    public function writeRecordProvider()
    {
        return array(
            array(array('test','testing','2.35','"test"'), '"test","testing","2.35","""test"""'."\n", '"', "\n"),
            array(array('test','testing','2.35','"test"'), '"test","testing","2.35","\\"test\\""'."\r\n", '\\', "\r\n"),
        );
    }
}