<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_File_Reader.
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_File_ReaderTest extends PHPUnit_Framework_TestCase
{
    public function testGetDialect()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('getDialect')->will($this->returnValue('dialect'));

        $sut->setFormat($mockFormat);

        $this->assertEquals('dialect', $sut->getDialect());
    }

    /**
     * @todo Implement testSetDialect().
     */
    public function testSetDialect()
    {
        $sut = new Dfp_Datafeed_File_Reader();

        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Dialect_Interface');

        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('setDialect')->with($this->equalTo($mockDialect));

        $sut->setFormat($mockFormat);

        $sut->setDialect($mockDialect);
    }

    public function testSetDialectString()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('setDialectString')->with($this->equalTo('dialect'));

        $sut->setFormat($mockFormat);

        $sut->setDialectString('dialect');
    }

    public function testGetLocation()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('getLocation')->will($this->returnValue('location'));

        $sut->setFormat($mockFormat);

        $this->assertEquals('location', $sut->getLocation());
    }

    public function testSetLocation()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('setLocation')->with($this->equalTo('location'));

        $sut->setFormat($mockFormat);

        $sut->setLocation('location');
    }
    /**
     * @todo Implement testGetXslt().
     */
    public function testGetXslt()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Xml');
        $mockFormat->expects($this->once())->method('getXslt')->will($this->returnValue('xslt'));
        
        $passed = false;
        
        try {
            $sut->getXslt();
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'getXslt can only be called when the format is XML') {
                $passed = true;
            }
        }
        
        $sut->setFormat($mockFormat);
        $this->assertEquals('xslt', $sut->getXslt());
        $this->assertTrue($passed);
        
    }

    /**
     * @todo Implement testSetXslt().
     */
    public function testSetXslt()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Xml');
        $mockFormat->expects($this->once())->method('setXslt')->with($this->equalTo('xslt'));
        
        $passed = false;
        
        try {
            $sut->setXslt('xslt');
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'setXslt can only be called when the format is XML') {
                $passed = true;
            }
        }
        
        $sut->setFormat($mockFormat);
        $sut->setXslt('xslt');
        $this->assertTrue($passed);
    }

    /**
     * @todo Implement testGetFormat().
     */
    public function testGetFormat()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $this->assertInstanceOf('Dfp_Datafeed_File_Reader_Format_Csv', $sut->getFormat());
    }

    /**
     * @todo Implement testGetFormat().
     */
    public function testSetFormatString()
    {
        $name = 'test' . uniqid();
        $className = 'Dfp_Datafeed_File_Reader_Format_' . ucfirst($name);

        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock(
        	'Dfp_Datafeed_File_Reader_Format_Interface',
        	array(),
        	array(),
        	$className
        );

        $sut->setFormatString($name);

        $this->assertInstanceOf($className, $sut->getFormat());
    }

    public function testSetFormatNamespace()
    {
        $sut = new Dfp_Datafeed_File_Reader();
    
        $sut->setFormatNamespace('test');
    
        $this->assertEquals('test', $sut->getFormatNamespace());
    }    
    
    /**
     * @todo Implement testSetFormat().
     */
    public function testSetFormat()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');

        $sut->setFormat($mockFormat);

        $this->assertSame($mockFormat, $sut->getFormat());
    }

    /**
     * @todo Implement testSetConfig().
     */
    public function testSetConfig()
    {
        $options = array('location'=>'/var/feed/feed.csv');

        $config = new Zend_Config($options);

        $sut = $this->getMock('Dfp_Datafeed_File_Reader', array('setOptions'));
        $sut->expects($this->once())->method('setOptions')->with($this->equalTo($options));

        $sut->setConfig($config);
    }

    /**
     * @todo Implement testSetOptions().
     */
    public function testSetOptions()
    {
        $options = array('format'=>'csv','dialect'=>'standard');

        $sut = $this->getMock('Dfp_Datafeed_File_Reader', array('getFormat','setFormatString'));

        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('setOptions')->with($this->equalTo(array('dialect'=>'standard')));
        $sut->expects($this->any())->method('getFormat')->will($this->returnValue($mockFormat));

        $sut->expects($this->once())->method('setFormatString')->with($this->equalTo('csv'));

        $sut->setOptions($options);
        
        //test with a format instance
        
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $options = array('format'=>$mockFormat);
        
        $sut = new Dfp_Datafeed_File_Reader();
        $sut->setOptions($options);
        
        $this->assertEquals($mockFormat, $sut->getFormat());     
        
        //test with invalid format
        
        $sut = new Dfp_Datafeed_File_Reader();
        $options = array('format'=>array());
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'Invalid format specified') {
                return;
            }
        }
        
        $this->fail('Exception not thrown');
    }

    public function test__construct() 
    {
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $options = array('format'=>$mockFormat);

        $sut = new Dfp_Datafeed_File_Reader($options);

        $this->assertEquals($mockFormat, $sut->getFormat());
        $c = new Zend_Config($options);
        
        $sut = new Dfp_Datafeed_File_Reader($c);
        
        $this->assertEquals($mockFormat, $sut->getFormat());
        
        try {
            $sut = new Dfp_Datafeed_File_Reader('invalid');
        } catch (Dfp_Datafeed_File_Reader_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                return;
            }
        }
        
        $this->fail('Exception not thrown');
    }
    
    public function testItterator()
    {
		$sut = new Dfp_Datafeed_File_Reader();
		$mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
		$sut->setFormat($mockFormat);
		$mockFormat->expects($this->atLeastOnce())->method('loadNextRecord')
                 ->will(
                     $this->onConsecutiveCalls(
                         array('a', 'b', 'c'),
                         array('a', 'b', 'c'),
                         false
                     )
                 );
		$mockFormat->expects($this->once())->method('resetFeed');
		foreach ($sut AS $i => $row) {
			$this->assertEquals(array('a', 'b', 'c'), $row);
		}
		
    }

    public function testAddError()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('addError')->with($this->equalTo('error'));

        $sut->setFormat($mockFormat);

        $sut->addError('error');
    }

    public function testAddErrors()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('addErrors')->with($this->equalTo(array('error','error2')));

        $sut->setFormat($mockFormat);

        $sut->addErrors(array('error','error2'));
    }

    public function testGetErrors()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('getErrors')->will($this->returnValue(array('error')));

        $sut->setFormat($mockFormat);

        $this->assertEquals(array('error'), $sut->getErrors());
    }

    public function testHasErrors()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('hasErrors')->will($this->returnValue(true));

        $sut->setFormat($mockFormat);

        $this->assertEquals(true, $sut->hasErrors());
    }

    public function testSetErrors()
    {
        $sut = new Dfp_Datafeed_File_Reader();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Reader_Format_Interface');
        $mockFormat->expects($this->once())->method('setErrors')->with($this->equalTo(array('error','error2')));

        $sut->setFormat($mockFormat);

        $sut->setErrors(array('error','error2'));
    }

    public function testFullRead()
    {
        $data = '"ID","Name","Price"' . "\n";
        $data .= '1,"test",3.50' . "\n";
        $data .= '2,"test 123",3.50' . "\n";
        $data .= '3,"test product",3.50' . "\n";
        $data .= '4,"test something",3.50' . "\n";
        $data .= '5,"test something else",3.50' . "\n";
        $data .= '6,"test failed",3.50' . "\n";
        $data .= '7,"testing",3.50' . "\n";
        $data .= '8,"tested",3.50' . "\n";
        $data .= '9,"test again",3.50' . "\n";
        $data .= '10,"test passed",3.50' . "\n";

        $results[1] = array('ID'=>'1','Name'=>'test','Price'=>'3.50');
        $results[2] = array('ID'=>'2','Name'=>'test 123','Price'=>'3.50');
        $results[3] = array('ID'=>'3','Name'=>'test product','Price'=>'3.50');
        $results[4] = array('ID'=>'4','Name'=>'test something','Price'=>'3.50');
        $results[5] = array('ID'=>'5','Name'=>'test something else','Price'=>'3.50');
        $results[6] = array('ID'=>'6','Name'=>'test failed','Price'=>'3.50');
        $results[7] = array('ID'=>'7','Name'=>'testing','Price'=>'3.50');
        $results[8] = array('ID'=>'8','Name'=>'tested','Price'=>'3.50');
        $results[9] = array('ID'=>'9','Name'=>'test again','Price'=>'3.50');
        $results[10] = array('ID'=>'10','Name'=>'test passed','Price'=>'3.50');

        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), $data);

        $sut = new Dfp_Datafeed_File_Reader();
        $sut->setLocation(vfsStream::url('base/test.csv'));

        foreach ($sut AS $position => $record) {
            $this->assertEquals($results[$position], $record);
        }
    }
    
    public function testGetFilters()
    {
    	$sut = new Dfp_Datafeed_File_Reader();
    	$this->assertEmpty($sut->getFilters());
    }
    
    public function testAddFieldFilter()
    {
    	$mockFilter = $this->getMock('Zend_Filter_Interface');
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addFieldFilter($mockFilter);
    	
    	$this->assertEquals(array('global'=>array($mockFilter)), $sut->getFilters());
    	
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addFieldFilter($mockFilter, 'test');
    	 
    	$this->assertEquals(array('fields'=>array('test'=>array($mockFilter))), $sut->getFilters());    	
    }
    
    public function testAddHeaderFilter()
    {
    	$mockFilter = $this->getMock('Zend_Filter_Interface');
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addHeaderFilter($mockFilter);
    	 
    	$this->assertEquals(array('header'=>array($mockFilter)), $sut->getFilters());    	
    }
    
    public function testAddFilter()
    {
    	$mockFilter = $this->getMock('Zend_Filter_Interface');
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addFilter($mockFilter);
    	 
    	$this->assertEquals(array('global'=>array($mockFilter)), $sut->getFilters());    	
    	
    	$mockFilter = $this->getMock('Zend_Filter_Interface');
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addFilter($mockFilter, 'test');

    	$this->assertEquals(array('fields'=>array('test'=>array($mockFilter))), $sut->getFilters());

    	$mockFilter = $this->getMock('Zend_Filter_Interface');
    	$sut = new Dfp_Datafeed_File_Reader();
    	$sut->addFilter($mockFilter, null, 'header');

    	$this->assertEquals(array('header'=>array($mockFilter)), $sut->getFilters());
    }
    
    public function testFilterRecord()
    {
    	$this->markTestIncomplete();
    }
}
