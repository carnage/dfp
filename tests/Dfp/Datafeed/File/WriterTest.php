<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_File_Writer.
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_File_WriterTest extends PHPUnit_Framework_TestCase
{
    public function testGetXslt()
    {
        $sut = new Dfp_Datafeed_File_Writer();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Xml');
        $mockFormat->expects($this->once())->method('getXslt')->will($this->returnValue('xslt'));
        
        $passed = false;
        
        try {
            $sut->getXslt();
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'getXslt can only be called when the format is XML') {
                $passed = true;
            }
        }
        
        $sut->setFormat($mockFormat);
        $this->assertEquals('xslt', $sut->getXslt());
        $this->assertTrue($passed);
        
    }

    public function testSetXslt()
    {
        $sut = new Dfp_Datafeed_File_Writer();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Xml');
        $mockFormat->expects($this->once())->method('setXslt')->with($this->equalTo('xslt'));
        
        $passed = false;
        
        try {
            $sut->setXslt('xslt');
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'setXslt can only be called when the format is XML') {
                $passed = true;
            }
        }
        
        $sut->setFormat($mockFormat);
        $sut->setXslt('xslt');
        $this->assertTrue($passed);
    }

    public function testGetFormat()
    {
        $sut = new Dfp_Datafeed_File_Writer();
        $this->assertInstanceOf('Dfp_Datafeed_File_Writer_Format_Csv', $sut->getFormat());
    }

    public function testSetFormat()
    {
        $sut = new Dfp_Datafeed_File_Writer();
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Interface');

        $sut->setFormat($mockFormat);

        $this->assertSame($mockFormat, $sut->getFormat());
    }

    public function testWriteRecord()
    {
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Interface');
        $mockFormat->expects($this->once())->method('writeRecord')->with($this->equalTo(array('data')));
        
        $sut = new Dfp_Datafeed_File_Writer();
        $sut->setFormat($mockFormat);
        $sut->writeRecord(array('data'));
    }
    
    public function testWriteRecords()
    {
        $sut = $this->getMock('Dfp_Datafeed_File_Writer', array('writeRecord'));
        $sut->expects($this->exactly(2))->method('writeRecord')->with($this->equalTo(array('data')));
        
        $sut->writeRecords(array(array('data'),array('data')));
        
    }

    public function testSetOptions()
    {
        $options = array('format'=>'csv','dialect'=>'standard');
    
        $sut = $this->getMock('Dfp_Datafeed_File_Writer', array('getFormat','setFormatString'));
    
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Interface');
        $mockFormat->expects($this->once())->method('setOptions')->with($this->equalTo(array('dialect'=>'standard')));
        $sut->expects($this->any())->method('getFormat')->will($this->returnValue($mockFormat));
    
        $sut->expects($this->once())->method('setFormatString')->with($this->equalTo('csv'));
    
        $sut->setOptions($options);
    
        //test with a format instance
    
        $mockFormat = $this->getMock('Dfp_Datafeed_File_Writer_Format_Interface');
        $options = array('format'=>$mockFormat);
    
        $sut = new Dfp_Datafeed_File_Writer();
        $sut->setOptions($options);
    
        $this->assertEquals($mockFormat, $sut->getFormat());
    
        //test with invalid format
    
        $sut = new Dfp_Datafeed_File_Writer();
        $options = array('format'=>array());
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_File_Writer_Exception $e) {
            if ($e->getMessage() == 'Invalid format specified') {
                return;
            }
        }
    
        $this->fail('Exception not thrown');
    }    
    
    public function testFullWrite()
    {
        $data[] = array('col1'=>'data1', 'col2'=>'data2', 'col3'=>'data3', 'moredata');
        $data[] = array('col1'=>'data4', 'col2'=>'data5', 'col3'=>'data6', '');
        $expected = '"col1","col2","col3","0"' ."\n";
        $expected .= '"data1","data2","data3","moredata"' ."\n";
        $expected .= '"data4","data5","data6",""' ."\n";
        
        $sut = new Dfp_Datafeed_File_Writer();
        $options['format'] = 'Csv'; 
        $options['dialect'] = 'Standard';

        $sut->setOptions($options);
        
        $dir = vfsStream::setup('base');
        
        $sut->setLocation(vfsStream::url('base/test.csv'));
        
        $sut->writeRecords($data);
        
        $this->assertEquals($expected, file_get_contents(vfsStream::url('base/test.csv')));
    }
}
