<?php
/**
 * Test class for Dfp_Datafeed_File_Reader.
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_File_Record_ValidatorTest extends PHPUnit_Framework_TestCase
{
	public function testGetValidators()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$this->assertEmpty($sut->getValidators());
	}
	
	public function testAddGlobalValidator()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$mockValidator = $this->getMock('Zend_Validate_Interface');
		$sut->addValidator($mockValidator);

		$this->assertEquals(
				array('global'=>
					array(
						array('validator'=>$mockValidator, 'breakChain'=>true)
					)
				), 
				$sut->getValidators()
		);
	}

	public function testAddFieldValidator()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$mockValidator = $this->getMock('Zend_Validate_Interface');
		$sut->addValidator($mockValidator, 'test');
	
		$this->assertEquals(
				array('fields'=>
					array('test'=>
						array(
							array('validator'=>$mockValidator, 'breakChain'=>true)
						)
					)
				),
				$sut->getValidators()
		);
	}	
	
	public function testGetRequiredFields()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$this->assertEmpty($sut->getRequiredFields());
	}
	
	public function testAddRequiredField()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->addRequiredField('test');
		
		$this->assertEquals(array('test'), $sut->getRequiredFields());
	}
	
	public function testSetRequiredFields()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->setRequiredFields(array('test'));
		
		$this->assertEquals(array('test'), $sut->getRequiredFields());		
	}
	
	public function testAddRequiredFields()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->addRequiredFields(array('test','test2'));
		
		$this->assertEquals(array('test','test2'), $sut->getRequiredFields());
	}
	
	/**
	 * @todo Implement testAddError().
	 */
	public function testAddError()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->addError('123');
		$this->assertTrue($sut->hasErrors());
		$this->assertEquals(array('123'), $sut->getErrors());
	}
	
	/**
	 * @todo Implement testAddErrors().
	 */
	public function testAddErrors()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->addErrors(array('123','456'));
	
		$this->assertTrue($sut->hasErrors());
		$this->assertEquals(array('123','456'), $sut->getErrors());
	}
	
	/**
	 * @todo Implement testGetErrors().
	 */
	public function testGetErrors()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
	
		$this->assertEmpty($sut->getErrors());
	}
	
	/**
	 * @todo Implement testHasErrors().
	 */
	public function testHasErrors()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
	
		$this->assertFalse($sut->hasErrors());
	}
	
	/**
	 * @todo Implement testSetErrors().
	 */
	public function testSetErrors()
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		$sut->addErrors(array('123','456'));
	
		$sut->setErrors(array('789'));
	
		$this->assertEquals(array('789'), $sut->getErrors());
	}	
	/**
	 * @dataProvider validateRecordProvider
	 */	
	public function testValidateRecord($record, $expected, $required=array(),$validators=array())
	{
		$sut = new Dfp_Datafeed_File_Record_Validator();
		
		$sut->setRequiredFields($required);
		foreach ($validators as $validator) {
			call_user_func_array(array($sut, 'addValidator'), $validator);
		}
		
		$this->assertEquals($expected, $sut->validateRecord($record));
		
	}
	
	public function validateRecordProvider()
	{
		$passingValidator = $this->getMock('Zend_Validate_Interface');
		$passingValidator->expects($this->any())->method('isValid')->will($this->returnValue(true));
		$failingValidator = $this->getMock('Zend_Validate_Interface');
		$failingValidator->expects($this->any())->method('isValid')->will($this->returnValue(false));
		$failingValidator->expects($this->any())->method('getMessages')->will($this->returnValue(array('error')));
		
		return array(
			//test no validation
			array(
				array('test'=>'value'),
				true
			),
			//test required field
			array(
				array('test'=>'value'),
				true,
				array('test')		
			),
			array(
				array('nottest'=>'value'),
				false,
				array('test')
			),
			//test validate global
			array(
				array('test'=>'value'),
				true,
				array(),
				array(array($passingValidator, null, true))
			),
			array(
				array('test'=>'value'),
				false,
				array(),
				array(array($failingValidator, null, true))
			),
			//test validate global
			array(
				array('test'=>'value'),
				true,
				array(),
				array(array($passingValidator, 'test', true))
			),
			array(
				array('test'=>'value'),
				false,
				array(),
				array(array($failingValidator, 'test', true))
			),											
		);
	}
}