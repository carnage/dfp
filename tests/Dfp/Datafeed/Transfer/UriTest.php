<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_Transfer
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Transfer_UriTest extends PHPUnit_Framework_TestCase
{
    public function test__construct()
    {
        $passed = false;
        try {
            $sut = new Dfp_Datafeed_Transfer_Uri('hello');
        } catch (Dfp_Datafeed_Transfer_Adapter_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                $passed  = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut = new Dfp_Datafeed_Transfer_Uri(array('host'=>'test.com'));
        $this->assertEquals('test.com', $sut->getHost());

        $sut = new Dfp_Datafeed_Transfer_Uri(new Zend_Config(array('port'=>2222)));
        $this->assertEquals(2222, $sut->getPort());

    }

    public function testSetSchema()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setSchema('ftp');

        $this->assertEquals('ftp', $sut->getSchema());
    }

    public function testGetSchema()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getSchema());
    }

    public function testSetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setHost('example.com');

        $this->assertEquals('example.com', $sut->getHost());
    }

    public function testGetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getHost());
    }

    public function testSetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setPort('2222');

        $this->assertEquals('2222', $sut->getPort());
    }

    public function testGetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getPort());
    }

    public function testSetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setUsername('user');

        $this->assertEquals('user', $sut->getUsername());
    }

    public function testGetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getUsername());
    }

    public function testSetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setPassword('pass');

        $this->assertEquals('pass', $sut->getPassword());
    }

    public function testGetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getPassword());
    }

    public function testSetPath()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setPath('C:\\feedfiles\\');

        $this->assertEquals('C:\\feedfiles\\', $sut->getPath());
    }

    public function testGetPath()
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $this->assertNull($sut->getPath());
    }
    
    public function testSetFilename()
    {
    	$sut = new Dfp_Datafeed_Transfer_Uri();
    	$sut->setFilename('feed.csv');
    
    	$this->assertEquals('feed.csv', $sut->getFilename());
    }
    
    public function testGetFilename()
    {
    	$sut = new Dfp_Datafeed_Transfer_Uri();
    	$this->assertNull($sut->getFilename());
    }    

    /**
     * @dataProvider setOptionsProvider
     */
    public function testSetOptions($var, $valid, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = new Dfp_Datafeed_Transfer_Uri();

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($valid, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
        return array(
            array('schema', 'ftp', array(), 'Invalid Schema', 'Schema'),
            array('host', 'example.com', array(), 'Invalid Host', 'Host'),
            array('port', '2222', array(), 'Invalid Port', 'Port'),
            array('username', 'user', array(), 'Invalid Username', 'Username'),
            array('password', 'pass', array(), 'Invalid Password', 'Password'),
            array('path', 'C:\\feedfiles', array(), 'Invalid Basepath', 'Path'),
        	array('filename', 'test.csv', array(), 'Invalid Filename', 'Filename'),
        );
    }

    /**
    * @dataProvider getUriProvider
    */
    public function testGetUri($options, $expected, $expectedException = null)
    {
        $sut = new Dfp_Datafeed_Transfer_Uri();
        $sut->setOptions($options);
        try {
            $uri = $sut->__toString();
        } catch (Dfp_Datafeed_Transfer_Exception $e){
            if (!is_null($expectedException)) {
                $this->assertEquals($e->getMessage(),$expectedException);
                return;
            }
        }
        
        if (!is_null($expectedException)) {
        	$this->fail('Exception not thrown');
        }

        $this->assertEquals($expected, $uri);
    }

    public function getUriProvider()
    {
        return array(
            array(
            	array('host'=>'ftp.example.com'), 
            	null, 
            	'Remote locations must specify a schema. (How do you want me to connect to your server?)'
            ),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp'), 'ftp://ftp.example.com'),
        	array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'path'=>'path'), 'ftp://ftp.example.com/path'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'username'=>'user'), 'ftp://user@ftp.example.com'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'password'=>'pass'), 'ftp://ftp.example.com'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'port'=>'2222'), 'ftp://ftp.example.com:2222'),
            array(
                array('host'=>'ftp.example.com', 'schema'=>'ftp', 'username'=>'user', 'password'=>'pass'),
                'ftp://user:pass@ftp.example.com'
            ),
        	array(array('path'=>'/var/files'), '/var/files'),
        	array(array('path'=>'C:\\feedfiles\\'), 'C:\\feedfiles'),
       		array(array('path'=>'/var/files/', 'filename'=>'testfeed.csv'), '/var/files/testfeed.csv'),
        );
    }


}