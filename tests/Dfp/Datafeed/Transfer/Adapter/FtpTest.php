<?php
/**
 * Test class for Dfp_Datafeed_Transfer
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Transfer_Adapter_FtpTest extends PHPUnit_Framework_TestCase
{
    public function test__construct()
    {
        $passed = false;
        try {
            $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp('hello');
        } catch (Dfp_Datafeed_Transfer_Adapter_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                $passed  = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp(array('host'=>'testhost.com'));
        $this->assertEquals('testhost.com', $sut->getHost());

        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp(new Zend_Config(array('port'=>2222)));
        $this->assertEquals(2222, $sut->getPort());

    }

    public function testSetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setHost('example.com');

        $this->assertEquals('example.com', $sut->getHost());
    }

    public function testGetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertNull($sut->getHost());
    }

    public function testSetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setPort('2222');

        $this->assertEquals('2222', $sut->getPort());
    }

    public function testGetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertEquals('21', $sut->getPort());
    }

    public function testSetTimeout()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setTimeout(120, true);

        $this->assertEquals(120, $sut->getTimeout());
    }

    public function testGetTimeout()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertEquals(90, $sut->getTimeout());
    }

    public function testSetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setUsername('user');

        $this->assertEquals('user', $sut->getUsername());
    }

    public function testGetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertEquals('anonymous', $sut->getUsername());
    }

    public function testSetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setPassword('pass');

        $this->assertEquals('pass', $sut->getPassword());
    }

    public function testGetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertEquals('', $sut->getPassword());
    }

    public function testSetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $sut->setBasePath('C:\\feedfiles\\');

        $this->assertEquals('C:\\feedfiles', $sut->getBasePath());
    }

    public function testGetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();
        $this->assertNull($sut->getBasePath());
    }

    public function testSetPassive()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();

        $this->assertInstanceOf('Dfp_Datafeed_Transfer_Adapter_Ftp', $sut->setPassive(true, true));
    }

    /**
     * @dataProvider setOptionsProvider
     */
    public function testSetOptions($var, $valid, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = new Dfp_Datafeed_Transfer_Adapter_Ftp();

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($valid, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
        return array(
            array('host', 'example.com', array(), 'Invalid Host', 'Host'),
            array('port', '2222', array(), 'Invalid Port', 'Port'),
            array('username', 'user', array(), 'Invalid Username', 'Username'),
            array('password', 'pass', array(), 'Invalid Password', 'Password'),
            array('basepath', 'C:\\feedfiles', array(), 'Invalid Basepath', 'BasePath'),
        );
    }
}