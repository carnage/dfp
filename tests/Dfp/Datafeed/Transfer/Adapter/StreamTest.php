<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_Transfer
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Transfer_Adapter_StreamTest extends PHPUnit_Framework_TestCase
{
    public function test__construct()
    {
        $passed = false;
        try {
            $sut = new Dfp_Datafeed_Transfer_Adapter_Stream('hello');
        } catch (Dfp_Datafeed_Transfer_Adapter_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                $passed  = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream(array('basePath'=>'/var/files'));
        $this->assertEquals('/var/files', $sut->getBasePath());

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream(new Zend_Config(array('basePath'=>'/var/files')));
        $this->assertEquals('/var/files', $sut->getBasePath());

    }

    public function testSetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setBasePath('C:\\feedfiles\\');

        $this->assertEquals('C:\\feedfiles', $sut->getBasePath());
    }

    public function testGetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getBasePath());
    }

    /**
     * @dataProvider setOptionsProvider
     */
    public function testSetOptions($var, $valid, $expected, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($expected, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
    	$uri = new Dfp_Datafeed_Transfer_Uri();
    	$uri->setHost('example.com');

    	$uri2 = new Dfp_Datafeed_Transfer_Uri();
    	$uri2->setHost('example2.com');    	
    	
        return array(
            //array('schema', 'ftp', array(), 'Invalid Schema', 'Schema'),
            //array('host', 'example.com', array(), 'Invalid Host', 'Host'),
            //array('port', '2222', array(), 'Invalid Port', 'Port'),
            //array('username', 'user', array(), 'Invalid Username', 'Username'),
            //array('password', 'pass', array(), 'Invalid Password', 'Password'),
        	array('uri', array('host'=>'example.com'), $uri, 'example.com', 'Invalid value for uri option', 'Uri'),
        	array('uri', $uri2, $uri2, 'example.com', 'Invalid value for uri option', 'Uri'),
        	array('basepath', 'C:\\feedfiles', 'C:\\feedfiles', array(), 'Invalid Basepath', 'BasePath'),
        );
    }
    
    public function testGetUri()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertInstanceOf('Dfp_Datafeed_Transfer_Uri', $sut->getUri());
    }

    public function testSetUri()
    {
    	$sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
    	$uri = new Dfp_Datafeed_Transfer_Uri();
    	$sut->setUri($uri);
    	$this->assertSame($uri, $sut->getUri());
    }    

    public function testRetrieveFile()
    {
        $dir = vfsStream::setup('base');

        mkdir('vfs://base/src');
        mkdir('vfs://base/dest');

        file_put_contents('vfs://base/src/test.csv', 'testdata');

        $uri = new Dfp_Datafeed_Transfer_Uri();
        $uri->setHost('base/src');
        $uri->setSchema('vfs');
        
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setUri($uri);
        $sut->setBasePath('vfs://base/dest');

        $sut->retrieveFile('test.csv');

        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test.csv'));

        $sut->retrieveFile('test.csv', 'test2.csv');
        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test2.csv'));
    }

    public function testSendFile()
    {
        $dir = vfsStream::setup('base');

        mkdir('vfs://base/src');
        mkdir('vfs://base/dest');

        file_put_contents('vfs://base/src/test.csv', 'testdata');

        $uri = new Dfp_Datafeed_Transfer_Uri();
        $uri->setHost('base/dest');
        $uri->setSchema('vfs');
        
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setUri($uri);
        $sut->setBasePath('vfs://base/src');

        $sut->sendFile('test.csv');

        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test.csv'));

        $sut->sendFile('test.csv', 'test2.csv');
        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test2.csv'));
    }
}