<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_Transfer
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_TransferTest extends PHPUnit_Framework_TestCase
{
    public function testSendFile()
    {
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');

        $mockAdapter->expects($this->once())->method('sendFile')
                    ->with($this->equalTo('test.txt'), $this->equalTo('test.csv'));

        $sut = new Dfp_Datafeed_Transfer();
        
        $passed = false;
        try {
        	$sut->sendFile('test.txt', 'test.csv');
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
        	$passed = true;
        }
        
        $this->assertTrue($passed, 'Failed to throw exception when adapter is missing');        
        
        $sut->setAdapter($mockAdapter);

        $sut->sendFile('test.txt', 'test.csv');
    }

    public function testRetrieveFile()
    {
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');

        $mockAdapter->expects($this->once())->method('retrieveFile')
                    ->with($this->equalTo('test.txt'), $this->equalTo('test.csv'));

        $sut = new Dfp_Datafeed_Transfer();

        $passed = false;
        try {
        	$sut->retrieveFile('test.txt', 'test.csv');
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
        	$passed = true;
        }
        
        $this->assertTrue($passed, 'Failed to throw exception when adapter is missing');        
        
        $sut->setAdapter($mockAdapter);

        $sut->retrieveFile('test.txt', 'test.csv');
    }

    public function testSendFiles()
    {
        $sut = $this->getMock('Dfp_Datafeed_Transfer', array('sendFile'));
        $sut->expects($this->at(0))->method('sendFile')->with($this->equalTo('test.txt'), $this->equalTo('test.txt'));
        $sut->expects($this->at(1))->method('sendFile')
            ->with($this->equalTo('file.gif'), $this->equalTo('images/file.gif'));

        $sut->sendFiles(array('test.txt','file.gif'), array('test.txt', 'images/file.gif'));
    }

    public function testRetrieveFiles()
    {
        $sut = $this->getMock('Dfp_Datafeed_Transfer', array('retrieveFile'));
        $sut->expects($this->at(0))->method('retrieveFile')
            ->with($this->equalTo('test.txt'), $this->equalTo('test.txt'));
        $sut->expects($this->at(1))->method('retrieveFile')
            ->with($this->equalTo('file.gif'), $this->equalTo('images/file.gif'));

        $sut->retrieveFiles(array('test.txt','file.gif'), array('test.txt', 'images/file.gif'));
    }

    public function testGetAdapter()
    {
        $sut = new Dfp_Datafeed_Transfer();
        $this->assertNull($sut->getAdapter());
    }

    public function testSetAdapter()
    {
        $sut = new Dfp_Datafeed_Transfer();
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');

        $sut->setAdapter($mockAdapter);

        $this->assertSame($mockAdapter, $sut->getAdapter());
    }

    public function testSetConfig()
    {
        $options = array('adapterNamespace'=>'Test_Namespace');

        $config = new Zend_Config($options);

        $sut = $this->getMock('Dfp_Datafeed_Transfer', array('setOptions'));
        $sut->expects($this->once())->method('setOptions')->with($this->equalTo($options));

        $sut->setConfig($config);
    }

    public function testSetOptions()
    {
        $options = array('adapter'=>array('classname'=>'ftp'));

        $sut = $this->getMock('Dfp_Datafeed_Transfer', array('setAdapter'));

		$sut->expects($this->once())
		    ->method('setAdapter')
		    ->with($this->isInstanceOf('Dfp_Datafeed_Transfer_Adapter_Ftp'));

        $sut->setOptions($options);

        //test with a adapter instance

        $sut = new Dfp_Datafeed_Transfer();
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $options = array('adapter'=>$mockAdapter);

        $sut = new Dfp_Datafeed_Transfer();
        $sut->setOptions($options);

        $this->assertEquals($mockAdapter, $sut->getAdapter());
    }

    public function test__construct()
    {
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $options = array('adapter'=>$mockAdapter);

        $sut = new Dfp_Datafeed_Transfer($options);

        $this->assertEquals($mockAdapter, $sut->getAdapter());
        $c = new Zend_Config($options);

        $sut = new Dfp_Datafeed_Transfer($c);

        $this->assertEquals($mockAdapter, $sut->getAdapter());

        try {
            $sut = new Dfp_Datafeed_Transfer('invalid');
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                return;
            }
        }

        $this->fail('Exception not thrown');
    }

    public function testAddError()
    {
        $sut = new Dfp_Datafeed_Transfer();
        
        $passed = false;
        try {
        	$sut->addError('error');
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
        	$passed = true;
        }
        
        $this->assertTrue($passed, 'Failed to throw exception when adapter is missing');
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $mockAdapter->expects($this->once())->method('addError')->with($this->equalTo('error'));

        $sut->setAdapter($mockAdapter);

        $sut->addError('error');
    }

    public function testAddErrors()
    {
        $sut = new Dfp_Datafeed_Transfer();
        
        $passed = false;
        try {
        	$sut->addErrors(array('error', 'error2'));
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
        	$passed = true;
        }
        
        $this->assertTrue($passed, 'Failed to throw exception when adapter is missing');        
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $mockAdapter->expects($this->once())->method('addErrors')->with($this->equalTo(array('error','error2')));

        $sut->setAdapter($mockAdapter);

        $sut->addErrors(array('error','error2'));
    }

    public function testGetErrors()
    {
        $sut = new Dfp_Datafeed_Transfer();
        
        $this->assertEmpty($sut->getErrors());
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $mockAdapter->expects($this->once())->method('getErrors')->will($this->returnValue(array('error')));

        $sut->setAdapter($mockAdapter);

        $this->assertEquals(array('error'), $sut->getErrors());
    }

    public function testHasErrors()
    {
        $sut = new Dfp_Datafeed_Transfer();
        
        $this->assertFalse($sut->hasErrors());
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $mockAdapter->expects($this->once())->method('hasErrors')->will($this->returnValue(true));

        $sut->setAdapter($mockAdapter);

        $this->assertEquals(true, $sut->hasErrors());
    }

    public function testSetErrors()
    {
        $sut = new Dfp_Datafeed_Transfer();
        
        $passed = false;
        try {
        	$sut->setErrors(array('error','error2'));
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
        	$passed = true;
        }
        
        $this->assertTrue($passed, 'Failed to throw exception when adapter is missing');        
        
        $mockAdapter = $this->getMock('Dfp_Datafeed_Transfer_Adapter_Interface');
        $mockAdapter->expects($this->once())->method('setErrors')->with($this->equalTo(array('error','error2')));

        $sut->setAdapter($mockAdapter);

        $sut->setErrors(array('error','error2'));
    }

}
