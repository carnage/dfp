<?php
/**
 * Test class for Dfp_Datafeed_Archive
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Archive_Adapter_AbstractTest extends PHPUnit_Framework_TestCase
{
    public function testGetLocation()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $this->assertNull($sut->getLocation());
    }

    public function testGetExtractPath()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $this->assertNull($sut->getExtractPath());
    }

    public function testSetLocation()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $sut->setLocation('C:\\zipfile.zip');

        $this->assertEquals('C:\\zipfile.zip', $sut->getLocation());
    }

    public function testSetExtractPath()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $sut->setExtractPath('C:\\tmp\\');

        $this->assertEquals('C:\\tmp\\', $sut->getExtractPath());
    }

    public function testSetConfig()
    {
        $config = new Zend_Config(array('location'=>'test'));
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');
        $sut->setConfig($config);

        $this->assertEquals('test', $sut->getLocation());
    }

    public function testAddError()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');
        $sut->addError('123');
        $this->assertTrue($sut->hasErrors());
        $this->assertEquals(array('123'), $sut->getErrors());
    }

    public function testAddErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');
        $sut->addErrors(array('123','456'));

        $this->assertTrue($sut->hasErrors());
        $this->assertEquals(array('123','456'), $sut->getErrors());
    }

    public function testGetErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $this->assertEmpty($sut->getErrors());
    }

    public function testHasErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $this->assertFalse($sut->hasErrors());
    }

    public function testSetErrors()
    {
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');
        $sut->addErrors(array('123','456'));

        $sut->setErrors(array('789'));

        $this->assertEquals(array('789'), $sut->getErrors());
    }

    /**
    * @dataProvider setOptionsProvider
    */
    public function testSetOptions($var, $valid, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = $this->getMockForAbstractClass('Dfp_Datafeed_Archive_Adapter_Abstract');

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Archive_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($valid, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
        return array(
            array('location', 'C:\\zipfile.zip', array(), 'Invalid location specified', 'Location'),
            array('extractPath', 'C:\\tmp\\', array(), 'Invalid extract path specified', 'ExtractPath'),
        );
    }
    
    public function testFactoryExceptions()
    {
    	//test for requrired missing parameters
    	$options = array();
    	try {
    		$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	} catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
    		$message = $e->getMessage();
    	}
    
    	$this->assertEquals('You must provide either the classname or the full classname' , $message);
    	 
    	//test for correct classname generation with namespaces
    	$targetClass = uniqid('Ftp');
    	$options = array(
    			'classname' => $targetClass,
    			'phpNamespace'=>true,
    			'namespace'=>'Adapter',
    			'prefix'=>'Dft'
    	);
    	 
    	try {
    		$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	} catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
    		$message = $e->getMessage();
    	}
    	 
    	$this->assertEquals('Dft\\Adapter\\' . $targetClass . ' was not found.' , $message);
    	 
    	//test for correct response for an none existant class
    	$targetClass = uniqid('Ftp');
    	$options = array('fullClassname' => $targetClass);
    	 
    	try {
    		$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	} catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
    		$message = $e->getMessage();
    	}
    	 
    	$this->assertEquals($targetClass . ' was not found.' , $message);
    	 
    	//test for creating class which dosn't implement the correct interface
    	$this->getMockForAbstractClass(
    			'Dfp_Datafeed_Archive',
    			array(),
    			$targetClass
    	);
    
    	try {
    		$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	} catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
    		$message = $e->getMessage();
    	}
    
    	$this->assertEquals($targetClass . ' does not implement Dfp_Datafeed_Archive_Adapter_Interface', $message);
    }
    
    public function testFactorySetOptions()
    {
    	$zipMock = $this->getMock('ZipArchive');
    	
    	$options = array('classname' => 'Zip', 'options'=>array('zip'=>$zipMock));
    	$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	 
    	$this->assertEquals($zipMock, $class->getZip());
    }
    
    /**
     * @dataProvider factoryProvider
     */
    public function testFactory($targetClass, $options)
    {
    	//generate the expected classname in php's memory
    	$this->getMockForAbstractClass(
    			'Dfp_Datafeed_Archive_Adapter_Abstract',
    			array(),
    			$targetClass
    	);
    	 
    	 
    	$class = Dfp_Datafeed_Archive_Adapter_Abstract::factory($options);
    	$this->assertInstanceOf($targetClass, $class);
    }
    
    public function factoryProvider()
    {
    	$classnames[] = uniqid('Ftp');
    	$classnames[] = uniqid('Ftp');
    	$classnames[] = uniqid('Ftp');
    	$classnames[] = uniqid('Ftp');
    	$classnames[] = uniqid('Ftp');
    	 
    	return array(
    			array(
    					'Dfp_Datafeed_Archive_Adapter_' . $classnames[0],
    					array('classname'=>$classnames[0])
    			),
    			array(
    					'Pfd_Datafeed_Archive_Adapter_' . $classnames[1],
    					array('prefix'=>'Pfd', 'classname'=>$classnames[1])
    			),
    			array(
    					'Dfp_Adapter_' . $classnames[2],
    					array('namespace'=>'Adapter', 'classname'=>$classnames[2])
    			),
    			array(
    					$classnames[3],
    					array('fullClassname'=>$classnames[3])
    			),
    	);
    }
}