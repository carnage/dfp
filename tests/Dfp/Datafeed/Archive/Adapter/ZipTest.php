<?php

include_once 'vfsStream/vfsStream.php';

/**
 * Test class for Dfp_Datafeed_Archive
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Archive_Adapter_ZipTest extends PHPUnit_Framework_TestCase
{
    public function testGetZip()
    {
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();
        $this->assertInstanceOf('ZipArchive', $sut->getZip());
    }

    public function testSetZip()
    {
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $mockZip = $this->getMock('ZipArchive');

        $sut->setZip($mockZip);
        $this->assertSame($mockZip, $sut->getZip());
    }

    /**
    * @dataProvider setOptionsProvider
    */
    public function testSetOptions($var, $valid, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Archive_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($valid, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
        return array(
            array('zip', new ZipArchive(), array(), 'Invalid zip archive specified', 'Zip'),
        );
    }

    public function test__construct()
    {
        $passed = false;
        try {
            $sut = new Dfp_Datafeed_Archive_Adapter_Zip('hello');
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                $passed  = true;
            }
        }

        $mockZip = $this->getMock('ZipArchive');

        $this->assertTrue($passed, 'Exception not thrown');

        $sut = new Dfp_Datafeed_Archive_Adapter_Zip(array('zip'=>$mockZip));
        $this->assertSame($mockZip, $sut->getZip());

        $sut = new Dfp_Datafeed_Archive_Adapter_Zip(new Zend_Config(array('zip'=>$mockZip)));
        $this->assertSame($mockZip, $sut->getZip());

    }

    public function testExtractFiles()
    {
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $passed = false;
        try {
            $sut->extractFiles();
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'No location set') {
                $passed = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut->setLocation('test.zip');

        $passed = false;
        try {
            $sut->extractFiles();
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'No extract path set') {
                $passed = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut->setExtractPath('C:\\tmp\\');

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->once())->method('open')->with($this->equalTo('test.zip'))
                ->will($this->returnValue(false));
        $sut->setZip($mockZip);

        $passed = false;
        try {
            $sut->extractFiles();
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'Unable to open file') {
                $passed = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->once())->method('open')->with($this->equalTo('test.zip'))
                ->will($this->returnValue(true));
        $mockZip->expects($this->once())->method('extractTo')->with($this->equalTo('C:\\tmp\\'));
        $sut->setZip($mockZip);

        $sut->extractFiles();
    }

    public function testAddFile()
    {
        //tests no files are added to the zip if no files have been added
        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->any())->method('open')->will($this->returnValue(true));
        $mockZip->expects($this->never())->method('addFile');
        $options = array('zip'=>$mockZip, 'location'=>'test.zip');
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip($options);

        $sut->close();

        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/test.csv'), "testData");

        //tests auto generating local name
        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->any())->method('open')->will($this->returnValue(true));
        $mockZip->expects($this->once())->method('addFile')
                ->with($this->equalTo(vfsStream::url('base/test.csv')), $this->equalTo('test.csv'));
        $options = array('zip'=>$mockZip, 'location'=>'test.zip');
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip($options);

        $sut->addFile(vfsStream::url('base/test.csv'));
        $sut->close();

        //tests adding file with a localname
        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->any())->method('open')->will($this->returnValue(true));
        $mockZip->expects($this->once())->method('addFile')
                ->with($this->equalTo(vfsStream::url('base/test.csv')), $this->equalTo('localname.txt'));
        $options = array('zip'=>$mockZip, 'location'=>'test.zip');
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip($options);

        $sut->addFile(vfsStream::url('base/test.csv'), 'localname.txt');
        $sut->close();
    }

    public function testClose()
    {
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $passed = false;
        try {
            $sut->close();
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'No location set') {
                $passed = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut->setLocation('test.zip');

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->once())->method('open')
                ->with($this->equalTo('test.zip'), $this->equalTo(ZIPARCHIVE::CREATE|ZIPARCHIVE::OVERWRITE))
                ->will($this->returnValue(false));
        $sut->setZip($mockZip);

        $passed = false;
        try {
            $sut->close();
        } catch (Dfp_Datafeed_Archive_Adapter_Exception $e) {
            if ($e->getMessage() == 'Unable to open file') {
                $passed = true;
            }
        }
    }

    public function testErrorHandling()
    {
        /* sets up vfs stream. */
        $dir = vfsStream::setup('base');
        file_put_contents(vfsStream::url('base/valid.txt'), "testData"); //used as a valid file
        file_put_contents(vfsStream::url('base/invalid.txt'), "testData"); //a readable file which can't be zipped
        //unreadable doesn't exist

        /* tests handling of a file which is readable initially but fails later */

        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->any())->method('open')->will($this->returnValue(true));

        $mockZip->expects($this->exactly(4))->method('close')
                ->will($this->onConsecutiveCalls(false, true, false, true));

        $sut->setZip($mockZip);

        $sut->addFile(vfsStream::url('base/valid.txt'));
        $sut->addFile(vfsStream::url('base/invalid.txt'));

        $sut->setLocation('test.zip');

        $sut->close();

        $this->assertEquals(array('Unable to add file: ' . vfsStream::url('base/invalid.txt')), $sut->getErrors());

        /* Tests handling of a file which is unreadable */

        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->once())->method('open')->will($this->returnValue(true));
        $sut->setZip($mockZip);

        $sut->addFile(vfsStream::url('base/unreadable.txt'));

        $sut->setLocation('test.zip');

        $sut->close();

        $this->assertEquals(array('Unable to read file: ' . vfsStream::url('base/unreadable.txt')), $sut->getErrors());

        /* tests that there is no affect on valid files if a file is unreadable */
        $sut = new Dfp_Datafeed_Archive_Adapter_Zip();

        $mockZip = $this->getMock('ZipArchive');
        $mockZip->expects($this->any())->method('open')->will($this->returnValue(true));

        $mockZip->expects($this->once())->method('addFile')
                ->with($this->equalTo(vfsStream::url('base/valid.txt')), $this->equalTo('valid.txt'));

        $mockZip->expects($this->any())->method('close')->will($this->returnValue(true));

        $sut->setZip($mockZip);

        $sut->addFile(vfsStream::url('base/unreadable.txt'));
        $sut->addFile(vfsStream::url('base/valid.txt'));

        $sut->setLocation('test.zip');

        $sut->close();

        $this->assertEquals(array('Unable to read file: ' . vfsStream::url('base/unreadable.txt')), $sut->getErrors());
    }
}